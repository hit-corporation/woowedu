'use strict';
const base_url = document.querySelector('base').href,
      kelas = document.getElementsByName('a_exam_class')[0],
      mapel = document.getElementsByName('a_exam_subject')[0],
      limit = document.getElementsByName('a_exam_time')[0],
      awal = document.getElementsByName('a_exam_start')[0],
      akhir = document.getElementsByName('a_exam_end')[0],
      btnAdd = document.getElementById('btn-add'),
      s_code = document.getElementById('s_code'),
      s_kelas = document.getElementById('s_kelas'),
      s_mapel = document.getElementById('s_mapel'),
      fs = document.forms['form-search'],
      frm = document.forms['form-add'];


(async $ => {
    const table = $('#tbl_ujian').DataTable({
        serverSide: true,
        processing: true,
        ajax: {
            url: base_url + 'api/exam/getAll'
        },
        select: {
			style:	'multi', 
			selector: 'td:first-child'
		},
        columns: [
            {
                data: null,
                className: 'select-checkbox',
                checkboxes: {
                    selectRow: true
                },
                orderable: false,
                render(data, type, row, _meta) {
                    return '';
                }
            },
            {
                data: 'id_ujian',
                visible:false
            },
            {
                data: 'kode_ujian'
            },
            {
                data: 'class_id',
                visible: false
            },
            {
                data: 'class_name'
            },
            {
                data:'subject_id',
                visible: false
            },
            {
                data: 'subject_code',
                visible: false
            },
            {
                data: 'subject_name'
            },
            {
                data: 'start_time'
            },
            {
                data: 'end_time'
            },
            {
                data: 'durasi'
            },
            {
                data: null,
                render(data, type, row, meta) {
                    var view = '<div class="btn-group btn-group-sm float-right">'+
                                    '<button class="btn btn-success edit_exam"><i class="bx bx-edit-alt font-size-12"></i></button>' +
                                    '<button class="btn btn-sm btn-danger delete_exam"><i class="bx bx-trash font-size-12"></i></button>' +
                                '</div>';
                    return view;
                }
            }
        ]
    });

    $('#btn-refresh').on('click', e => {
        table.ajax.reload();
    })
    
    document.getElementById('select_all').addEventListener('click', e => {

        if(e.target.checked)
            table.rows().select();
        else
            table.rows().deselect();
    });

    await getKelas();
    await getMapel();

    $(kelas).selectpicker('val', null);
    $(mapel).selectpicker('val', null);

    $(s_kelas).selectpicker('val', null);
    $(s_mapel).selectpicker('val', null);

    $(limit).daterangepicker({
        timePicker: true,
        timePicker24Hour: true,
        minDate: new Date(),
        locale: {
            format: "YYYY-MM-DD HH:mm:ss"
        }
    }, (startDate, endDate, label) => {
       
        const start = startDate.format("YYYY-MM-DD HH:mm:ss"),
              end   = endDate.format("YYYY-MM-DD HH:mm:ss");

        frm['a_exam_start'].value = start;
        frm['a_exam_end'].value = end;
    });
    
    $(limit).on('apply.daterangepicker', (e, picker) => {
        const start = picker.startDate.format("YYYY-MM-DD HH:mm:ss"),
        end   = picker.endDate.format("YYYY-MM-DD HH:mm:ss");

        frm['a_exam_start'].value = start;
        frm['a_exam_end'].value = end;
    })
    // faker.random.alphaNumeric(5)

    /**
     *  POST
     */
    let isUpdate = 0;

    btnAdd.addEventListener('click', e => {
        isUpdate = 0;
        frm.reset();
        $(kelas).selectpicker('val', null);
        $(mapel).selectpicker('val', null);
        frm['a_exam_code'].value = makeid(8);

    });

    document.getElementById('save-exam').addEventListener('click', e => {
        e.preventDefault();
        let event = new Event('submit');
        frm.dispatchEvent(event);
    });

    $('#tbl_ujian tbody').on('click', '.btn.edit_exam', e => {
        isUpdate = 1;
        let row = table.row(e.target.parentNode.closest('tr')).data();
        
        frm['a_exam_code'].value = row.kode_ujian;
        $(mapel).selectpicker('val', row.subject_id);
        $(kelas).selectpicker('val', row.class_id);
        frm['a_exam_time'].value = row.start_time + ' - ' + row.end_time;
        frm['a_exam_start'].value = row.start_time;
        frm['a_exam_end'].value = row.end_time;
        frm['a_id'].value = row.id_ujian;
        frm['a_exam_duration'].value = row.durasi;

        $('#modal-add').modal('show');
    })

    frm.addEventListener('submit', e => {
        e.preventDefault();

        const url = isUpdate == 0 ? base_url + 'api/exam/save' : base_url + 'api/exam/edit';

        $.ajax({
            url: url,
            type:'POST',
            data: $(e.target).serialize(),
            beforeSend(xhr, obj) {
                Swal.fire({
                    html: 	'<div class="d-flex flex-column align-items-center">'
                    + '<span class="spinner-border text-primary"></span>'
                    + '<h3 class="mt-2">Loading...</h3>'
                    + '<div>',
                    showConfirmButton: false,
                    width: '10rem'
                });
            },
            success(resp) {
                if(!isUpdate) {
                    Swal.fire({
                        type: resp.err_status,
                        title:`<h5 class="text-${resp.err_status} text-uppercase">${resp.err_status}</h5>`,
                        html: resp.message,
                        showCancelButton: true,
                        confirmButtonClass: "btn btn-success mt-2",
                        cancelButtonColor: "#f46a6a",
                        confirmButtonText: "Ya, Hapus Data",
                        cancelButtonText: "Tidak, Batalkan Hapus",
                        closeOnConfirm: false,
                        closeOnCancel: false
                    })
                    .then(t => {

                    });
                }
                else {
                    Swal.fire({
                        type: resp.err_status,
                        title:`<h5 class="text-${resp.err_status} text-uppercase">${resp.err_status}</h5>`,
                        html: resp.message,
                    });
                }
                
				//csrfToken.content = resp.token;
            },
            error(err) {
                let response = JSON.parse(err.responseText);
				Swal.fire({
					type: response.err_status,
					title: '<h5 class="text-danger text-uppercase">'+response.err_status+'</h5>',
					html: response.message
				});
				//if(response.hasOwnProperty('token'))
				//	csrfToken.setAttribute('content', response.token);
            },
            complete() {
                table.ajax.reload();
            }
         });
    });

       /**
     ===================================================
     *               DELETE DATA
     ===================================================
     */

     // DELETE ALL
     $('#delete_all').on('click', e => {
        var rows = table.rows({selected: true});
        var data = rows.data(),
            count = rows.count();
        var arr = [];
        if(count === 0) {
            Swal.fire({
				type: "error",
				title:'<h5 class="text-danger text-uppercase">Error</h5>',
				text: "No row selected !!!"
			});
			return false;
        }

        for(var i =0; i< count; i++) {
            arr.push(data[i].id_ujian);
        }

        Swal.fire({
            title: "Anda Yakin ?",
            text: "Data yang dihapus tidak dapat dikembalikan",
            type: "warning",
            showCancelButton: true,
            confirmButtonClass: "btn btn-success mt-2",
            cancelButtonColor: "#f46a6a",
            confirmButtonText: "Ya",
            cancelButtonText: "Tidak",
            closeOnConfirm: false,
            closeOnCancel: false
        }).then(t => {
            if(t.value) {
                erase(arr, 1);
            }
        })
     });

    // DELETE ONE
    $('#tbl_ujian tbody').on('click', '.btn.delete_exam', e => {
        var row = table.row($(e.target).parents('tr')).data();
        Swal.fire({
            title: "Anda Yakin ?",
            text: "Data yang dihapus tidak dapat dikembalikan",
            type: "warning",
            showCancelButton: true,
            confirmButtonClass: "btn btn-success mt-2",
            cancelButtonColor: "#f46a6a",
            confirmButtonText: "Ya, Hapus Data",
            cancelButtonText: "Tidak, Batalkan Hapus",
            closeOnConfirm: false,
            closeOnCancel: false
            }).then(t => {
                if(t.value) {
                    erase(row.id_ujian, 0);
                }
            })
        });

     function erase(data, isBulk) {
        return $.ajax({
            url: base_url + 'api/exam/delete',
            type: 'DELETE',
            data: JSON.stringify({data: data, isBulk: isBulk}),
            contentType: 'application/json',
            beforeSend(xhr, obj) {
                Swal.fire({
                    html: 	'<div class="d-flex flex-column align-items-center">'
                    + '<span class="spinner-border text-primary"></span>'
                    + '<h3 class="mt-2">Loading...</h3>'
                    + '<div>',
                    showConfirmButton: false,
                    width: '10rem'
                });
            },
            success(resp) {
                Swal.fire({
					type: resp.err_status,
					title:`<h5 class="text-${resp.err_status} text-uppercase">${resp.err_status}</h5>`,
					html: resp.message
				});
				//csrfToken.content = resp.token;
            },
            error(err) {
                let response = JSON.parse(err.responseText);
				Swal.fire({
					type: response.err_status,
					title: '<h5 class="text-danger text-uppercase">'+response.err_status+'</h5>',
					html: response.message
				});
				//if(response.hasOwnProperty('token'))
				//	csrfToken.setAttribute('content', response.token);
            },
            complete() {
                table.ajax.reload();
            }
        });
     }

     /**
      * ======================================
      *         SEARCH
      * ======================================
      */

      $('#search-button').on('click', e => {
        if(s_code.value !== '' || s_code.value !== null)
            table.columns(2).search(s_code.value).draw();
        if($(s_kelas).val() !== ''  || $(s_kelas).val() !== null)
            table.columns(3).search($(s_kelas).val()).draw();
    });

    $('#reset-search').on('click', e => {
        var form = document.forms['form-search'];
        form.reset();
        table.columns(2).search(s_code.value).draw();
        if($(s_kelas).val() !== ''  || $(s_kelas).val() !== null) {
            $(s_kelas).selectpicker('val', null);
            table.columns(3).search($(s_kelas).val()).draw();
        }
    });   

})(jQuery);

// ambil data kels
async function getKelas() {
    try 
    {
        const f = await fetch(`${base_url}api/kelas/get_all`);
        let datas = await f.json();
        
        for(let d of datas.data)
        {
            let opt = document.createElement('option');
            opt.text = d.class_name;
            opt.value = d.class_id;
            kelas.add(opt);
            // search
            let opt1 = document.createElement('option');
            opt1.text = d.class_name;
            opt1.value = d.class_id;
            s_kelas.add(opt1);
        }
    }
    catch(err)
    {
        console.log(err);
    }
}

// ambil data mapel
async function getMapel() {
    try 
    {
        const f = await fetch(`${base_url}api/subject/getAll`);
        let datas = await f.json();
        console.log(datas);
        for(let d of datas.data)
        {
            let opt = document.createElement('option');
            opt.text = d.nama_mapel;
            opt.value = d.id_mapel;
            mapel.add(opt);
            // search
            let opt1 = document.createElement('option');
            opt1.text = d.nama_mapel;
            opt1.value = d.id_mapel;
            s_mapel.add(opt1);
        }
    }
    catch(err) 
    {
        console.log(err);
    }

}